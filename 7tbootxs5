-- Game and player limit configuration
local gameId = 7239319209 -- Replace with your game's ID
local playersLimit = 39 -- Maximum players in a server
local maxRetries = 10 -- Max number of retries before stopping
local retries = 0
local foundMoneyPrinter = false

-- Main function to manage the process
function teleportAndTriggerProximityPrompt()
    print("Starting search for Money Printer...")

    while not foundMoneyPrinter and retries < maxRetries do
        print("Checking for Money Printer... Attempt:", retries + 1)
        foundMoneyPrinter = checkForMoneyPrinter()

        if not foundMoneyPrinter then
            local success = hopToAnotherServer(gameId)
            if not success then
                print("Failed to hop to another server. Retrying...")
            end

            retries = retries + 1
            wait(math.random(1, 3)) -- Random delay to prevent API spamming
        else
            print("Money Printer found! Exiting search.")
        end
    end

    if retries >= maxRetries then
        print("Max retries reached. Could not find Money Printer. Exiting.")
    end
end

-- Function to check for the Money Printer in the current server
function checkForMoneyPrinter()
    local moneyPrinterName = "MoneyPrinter" -- Adjust this to match the target object name
    local workspace = game:GetService("Workspace")

    -- Check for the object in Workspace
    for _, object in pairs(workspace:GetChildren()) do
        if object.Name == moneyPrinterName then
            print("Money Printer detected in the current server!")
            return true
        end
    end

    print("Money Printer not found in this server.")
    return false
end

-- Function to hop to another server
function hopToAnotherServer(gameId)
    local HttpService = game:GetService("HttpService")
    local TeleportService = game:GetService("TeleportService")

    -- Fetch server list from Roblox API
    local url = "https://games.roblox.com/v1/games/" .. gameId .. "/servers/Public?limit=100"
    local success, response = pcall(function()
        return HttpService:GetAsync(url)
    end)

    if not success then
        print("Error fetching server list:", response)
        return false
    end

    -- Decode the server list JSON response
    local servers
    success, servers = pcall(function()
        return HttpService:JSONDecode(response)
    end)

    if not success then
        print("Error decoding server list:", servers)
        return false
    end

    -- Find a suitable server
    for _, server in ipairs(servers.data) do
        if server.playing < playersLimit and server.id ~= game.JobId then
            print("Found suitable server. Teleporting...")
            TeleportService:TeleportToPlaceInstance(gameId, server.id)
            return true
        end
    end

    print("No suitable servers found.")
    return false
end

-- Start the process
teleportAndTriggerProximityPrompt()
